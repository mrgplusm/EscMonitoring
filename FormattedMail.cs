// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Monitoring
{
    using Common;
    using Common.Model;
    using UserControls;
    using ViewModel;
    using System.Linq;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class FormattedMail : FormattedMailBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
<html lang=""en"" xmlns=""http://www.w3.org/1999/xhtml"">
<head>
    <meta charset=""utf-8"" />
    <title></title>
    <style>
        caption {
            font-weight: 600;
        }

        table {
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #cecfd5;
            padding: 10px 15px;
        }

        tbody tr:nth-child(even) {
            background: #f0f0f2;
        }

        td:first-child {
            border-left: 1px solid #cecfd5;
        }

        div {         
            padding: 20px;
        }


        thead {
            background: #395870;
            color: #fff;
        }              

    </style>
</head>
<body>





<div id=""Organisation"">
        <table>
            <caption>Organisation</caption>
");
            
            #line 56 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 foreach (var s in Enum.GetValues(typeof(OrganisationDetail)).OfType<OrganisationDetail>()) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t<tr><td> ");
            
            #line 58 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(s.ToString()));
            
            #line default
            #line hidden
            this.Write(" </td> <td> ");
            
            #line 58 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.OrganisationDetails[0][(int)s]));
            
            #line default
            #line hidden
            this.Write("</td> </tr>\r\n\r\n");
            
            #line 60 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 } 
            
            #line default
            #line hidden
            this.Write("</table>\r\n</div>\r\n    <div id=\"Dealer\">\r\n\r\n        <table>\r\n            <caption>" +
                    "Dealer</caption>\r\n");
            
            #line 67 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 foreach (var s in Enum.GetValues(typeof(OrganisationDetail)).OfType<OrganisationDetail>()) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t<tr><td> ");
            
            #line 69 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(s.ToString()));
            
            #line default
            #line hidden
            this.Write(" </td> <td> ");
            
            #line 69 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.OrganisationDetails[1][(int)s]));
            
            #line default
            #line hidden
            this.Write("</td> </tr>\r\n\r\n");
            
            #line 71 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 } 
            
            #line default
            #line hidden
            this.Write("</table>\r\n    </div>\r\n    <div id=\"Errors\">\r\n        <table>\r\n            <captio" +
                    "n>\r\n                Last 10 errors\r\n            </caption>\r\n            <thead>\r" +
                    "\n\t<tr>\r\n\t");
            
            #line 81 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 foreach (var colum in ErrorHeaderComs)
{ 
            
            #line default
            #line hidden
            this.Write("    <th>");
            
            #line 83 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(colum));
            
            #line default
            #line hidden
            this.Write("</th>\r\n\r\n");
            
            #line 85 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
}
            
            #line default
            #line hidden
            this.Write("\t</tr>\r\n\t</thead>\r\n            <tbody>\t\t\t\r\n\t");
            
            #line 89 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 

	if(ErrorsToSend !=null) {
	  
	foreach (var source in ErrorsToSend)
{ 
		var e = new ErrorLineViewModel(source);

            
            #line default
            #line hidden
            this.Write("\t<tr>\r\n\t\t<td> ");
            
            #line 98 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(e.StrId));
            
            #line default
            #line hidden
            this.Write(" </td>\r\n\t\t<td> ");
            
            #line 99 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(e.StrEscUnit));
            
            #line default
            #line hidden
            this.Write(" </td>\r\n\t\t<td> ");
            
            #line 100 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(e.StrStatus));
            
            #line default
            #line hidden
            this.Write(" </td>\r\n\t\t<td> ");
            
            #line 101 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(e.StrDevice));
            
            #line default
            #line hidden
            this.Write(" </td>\r\n\t\t<td> ");
            
            #line 102 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(e.StrDetail));
            
            #line default
            #line hidden
            this.Write(" </td>\r\n\t\t<td> ");
            
            #line 103 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(e.Description));
            
            #line default
            #line hidden
            this.Write(" </td>\r\n\t\t<td> ");
            
            #line 104 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(e.StrDate));
            
            #line default
            #line hidden
            this.Write(" </td>\r\n\t</tr>\r\n");
            
            #line 106 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 } 

}
            
            #line default
            #line hidden
            this.Write(@"			</tbody>
		</table>
	</div>

  <div id=""Users"">
        <table>
            <caption>
                Log cleared by
            </caption>
            <thead>
	<tr>
	
    <th>User</th>
    <th>Date & Time</th>

	</tr>
	</thead>
            <tbody>
	 
	");
            
            #line 128 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 


	if(ClearedErrors !=null) {
	foreach (var source in ClearedErrors)
{ 		

            
            #line default
            #line hidden
            this.Write("\t<tr>\r\n\t\t<td> ");
            
            #line 136 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(source.LogClearedBy));
            
            #line default
            #line hidden
            this.Write(" </td>\r\n\t\t<td> ");
            
            #line 137 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(source.LogCleared.ToString("u")));
            
            #line default
            #line hidden
            this.Write(" </td>\t\t\r\n\t</tr>\r\n");
            
            #line 139 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 
} }

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t\t");
            
            #line 146 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 if (Model.InspectorCleared) { 
            
            #line default
            #line hidden
            this.Write("\t\t<p>Log was cleared during an inspection of the VA system</p>\r\n\t\t");
            
            #line 148 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 }
            
            #line default
            #line hidden
            this.Write("\t</div>\r\n\r\n\r\n<div id=connections>\r\n\r\n\r\n");
            
            #line 155 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 
    if(Connections !=null) foreach (var s in Connections.Where(d => d.Errors != null && d.Errors.Count > 0)) { 
            
            #line default
            #line hidden
            this.Write("      \r\n<table>\r\n<caption>");
            
            #line 158 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(s.IpAddress));
            
            #line default
            #line hidden
            this.Write("</caption>\r\n<tbody>\r\n");
            
            #line 160 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 foreach (var q in Enumerable.Reverse(s.Errors.Take(10)))
{
 
            
            #line default
            #line hidden
            this.Write("      \r\n<tr>\r\n<td>");
            
            #line 164 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(q));
            
            #line default
            #line hidden
            this.Write("</td>\r\n</tr>\r\n");
            
            #line 166 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 } 
            
            #line default
            #line hidden
            this.Write("</tbody>\r\n</table>\r\n");
            
            #line 169 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n</div>\r\n\r\n\r\n </body>\r\n </html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 178 "C:\Users\asuspc\Repositories\EscMonitoring\FormattedMail.tt"
 

public List<ConnectionModel> Connections { get; set; }
public List<LogClearEntry> ClearedErrors { get; set; }
public List<ErrorLineModel> ErrorsToSend { get; set; }

public SendEmailModel Model { get; set; }


private readonly string[] ErrorHeaderComs =
{
    UcLog.chId, UcLog.chUnit, UcLog.chStatus, UcLog.chDevice, UcLog.chDetail, UcLog.chDescription, UcLog.chDateTime,
};


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class FormattedMailBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
